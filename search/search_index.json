{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>[ [</p> <p>The paradigm of schema-driven API approaches is gaining increasing popularity as it facilitates programmatic interaction with systems by both machines and humans. While OpenAPI schema stands out as a widely embraced system, there are other notable schema approaches like YANG, among others. This project endeavors to empower users with a declarative and idempotent method for seamless interaction with API systems, providing a robust foundation for effective system configuration.\"</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The project consists of 4 components:</p> <p></p>"},{"location":"#schema-server","title":"Schema-server","text":"<p>The schema server component is a versatile repository for schemas from diverse vendors and versions. It features a GRPC API for seamless schema querying and dynamic management, allowing users to load and unload schemas in real time. The integration of a CLI enhances user interaction, providing a familiar command-line interface. Operating in a stateless architecture, it offers scalability, while optional schema persistence caters to users requiring persistent storage. In essence, the schema server combines flexibility, efficiency, and user-friendliness for effective schema management in dynamic API environments.</p>"},{"location":"#data-server","title":"Data-server","text":"<p>The data-server component serves as a versatile intermediary, connecting the config-server, schema-server, cache, and xNF/Device in a stateless design for scalability. It features a North-bound API for both imperative and declarative interactions and supports various South-bound protocols. With dedicated DataStores per target, flexible synchronization options, candidate-based interactions, and the ability to connect multiple data servers per device, it provides a resilient and adaptable foundation for managing and synchronizing data in dynamic system environments.</p>"},{"location":"#cache","title":"Cache","text":"<p>The cache component manages multiple datastores, including Config, State, and Intended, along with Intent metadata. It offers the option for persistent data storage, complemented by a GRPC API for seamless interaction. Additionally, the cache component provides a derived Command Line Interface (CLI) for user-friendly access and configuration.</p>"},{"location":"#config-server","title":"Config-server","text":"<p>The config-server is a Kubernetes-based Operator and comprises of several controllers:</p> <ul> <li>Schema Controller: Manages the lifecycle of schemas using Schema Custom Resources (CR).</li> <li>Discovery Controller: Manages the lifecycle of targets through DiscoveryRule CR, discovering devices/NF(s)</li> <li>Target Controller: Manages the lifecycle of Target DataStores using Target CR.</li> <li>Config API Server: Manages the lifecycle of Config resources.<ul> <li>Utilizes its storage backend (not etcd).</li> <li>Interacts declaratively with the data-server through Intent transactions.</li> <li>Implements validation checks, rejecting configurations that fail validation.</li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Schema's: YANG, others TBD</li> <li>Targets: Physical devices (<code>PNF</code>), Containers (<code>CNF</code>), Virtual Machines (<code>VNF</code>) and <code>NOOP</code> (No Operation)</li> <li>Vendor agnostic</li> <li>Flexible deployments: Small, medium or large scale scaled out deployments</li> <li>Target Protocols: gNMI, Netconf</li> <li>Full Config or Config Snippets</li> <li>Declarative Operation</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"basic_usage/","title":"Basic usage","text":"<p>dummy</p>"},{"location":"examples/0_about/","title":"About lab examples","text":"<p>Note</p> <p>The lab examples that you find on this site are meant to explain the basics of using <code>sdc</code>. </p> <p>These lab examples are meant to be used as-is or as a base layer to a more customized or elaborated lab scenarios. </p>"},{"location":"examples/1_k8s_srl_collocated/","title":"K8s with gNMI devices (SR Linux)","text":""},{"location":"examples/1_k8s_srl_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/1_k8s_srl_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/1_k8s_srl_collocated/#sdc-on-kubernetes","title":"SDC on kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/1_k8s_srl_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: srl-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nsrl:\ntype: ixrd3\nimage: ghcr.io/nokia/srlinux:23.10.1-218\nnodes:\ndev1:\nkind: srl\ndev2:\nkind: srl\nlinks:\n</code></pre> <p>Record the ip addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/1_k8s_srl_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SRLinux version 23.10.1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/srlinux-yang-models\nprovider: srl.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: v23.10.1\ndirs:\n- src: srlinux-yang-models\ndst: .\nschema:\nmodels:\n- srl_nokia/models\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nexcludes:\n- .*tools.*\nEOF\n</code></pre> <p>you can valdate the schema loading using the following command.</p> <pre><code>kubectl get schema srl.nokia.sdcio.dev-23.10.1\n</code></pre> <p>If successfull you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                          READY   URL                                            REF        PROVIDER              VERSION\nsrl.nokia.sdcio.dev-23.10.1   True    https://github.com/nokia/srlinux-yang-models   v23.10.1   srl.nokia.sdcio.dev   23.10.1\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: srl.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>gnmi</code> with port <code>57400</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: ASCII\nskipVerify: true\ninsecure: false\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>gnmi</code> using an ON-CHANGE subscription.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: config\ninterval: 0\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static ip discovery (or better no discovery). It means the <code>ip address/prefix</code>  containerlab returned should be used as the ip prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nkind: ip\nperiod: 1m\nconcurrentScans: 2\nprefixes:\n- prefix: 172.20.20.3\nhostName: dev1\n- prefix: 172.20.20.2\nhostName: dev2\ndiscover: false\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ndefaultSchema:\nprovider: srl.nokia.sdcio.dev  version: 23.10.1\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following comamnd</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   DATASTORE   PROVIDER              ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True    True        srl.nokia.sdcio.dev   172.20.20.3:57400\ndev2   True    True        srl.nokia.sdcio.dev   172.20.20.2:57400\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be comsumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: targetName and targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1\nnamespace: default\nlabels:\ntargetName: dev1\ntargetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\nEOF\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/","title":"K8s with NETCONF devices (SROS)","text":""},{"location":"examples/2_k8s_sros_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/2_k8s_sros_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/2_k8s_sros_collocated/#sdc-on-kubernetes","title":"SDC on kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/2_k8s_sros_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: sros-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nvr-sros:\nimage: registry.srlinux.dev/pub/vr-sros:23.10.R1\nlicense: license-sros23.txt\nnodes:\ndev1:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.11\nmgmt-ipv6: 2001:172:20:20::11\ndev2:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.12\nmgmt-ipv6: 2001:172:20:20::12\n</code></pre> <p>Record the ip addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/2_k8s_sros_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SRLinux version 23.10.1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: sros.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/7x50_YangModels\nprovider: sros.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: sros_23.10.r1\ndirs:\n- src: YANG\ndst: .\nschema:\nmodels:\n- nokia-combined\nincludes:\n- ietf\n- nokia-sros-yang-extensions.yang\nexcludes: []\nEOF\n</code></pre> <p>you can valdate the schema loading using the following command.</p> <pre><code>kubectl get schema sros.nokia.sdcio.dev-23.10.1\n</code></pre> <p>If successfull you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                          READY   URL                                            REF        PROVIDER              VERSION\nsros.nokia.sdcio.dev-23.10.1   True    https://github.com/nokia/7x50_YangModels   sros_23.10.r1   sros.nokia.sdcio.dev   23.10.1\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: sros.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>netconf</code> with port <code>830</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: netconf\nnamespace: default\nlabels:\ndummy: dummy\nspec:\nport: 830\nprotocol: netconf\nencoding: ASCII\nskipVerify: true\nincludeNS: true\noperationWithNS: true\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>netconf</code> using a PERIOD retrieval.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: netconf-getconfig\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: netconf\npaths:\n- /\nmode: sample\nencoding: config\ninterval: 10\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static ip discovery (or better no discovery). It means the <code>ip address/prefix</code>  containerlab returned should be used as the ip prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nkind: ip\nperiod: 1m\nconcurrentScans: 2\nprefixes:\n- prefix: 172.20.20.11\nhostName: dev1\n- prefix: 172.20.20.12\nhostName: dev2\ndiscover: false\ntargetConnectionProfiles:\n- credentials: sros.nokia.sdcio.dev connectionProfile: netconf\nsyncProfile: netconf-getconfig\ndefaultSchema:\nprovider: sros.nokia.sdcio.dev version: 23.10.1\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following comamnd</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   DATASTORE   PROVIDER              ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True    True        sros.nokia.sdcio.dev   172.20.20.11:57400\ndev2   True    True        sros.nokia.sdcio.dev   172.20.20.12:57400\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be comsumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: targetName and targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1-sros\nnamespace: default\nlabels:\ntargetName: dev1\ntargetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\nconfigure:\nservice:\nvprn:\nservice-name: \"vprn123\"\ncustomer: \"1\"\nservice-id: \"200\"\nadmin-state: \"enable\"\nEOF\n</code></pre>"},{"location":"install/1_overview/","title":"Overview","text":"<p>The schema driven configuration system (<code>sdc</code>) consists of 4 components:</p> <ul> <li>schema-server</li> <li>data-server</li> <li>cache</li> <li>config-server</li> </ul> <p>The <code>config-server</code> depends on <code>kubernetes</code>, but the other 3 components (<code>schema-server</code>, <code>data-server</code> and <code>cache</code>) can be deployed independent from kubernetes.</p>"},{"location":"install/2_prereq/","title":"Pre-Requisites","text":""},{"location":"install/2_prereq/#kubectl","title":"kubectl","text":"<p>First install kubectl if not already installed</p>"},{"location":"install/2_prereq/#auto-completions-for-kubectl-optional","title":"Auto completions for kubectl (optional)","text":"bashzsh <pre><code>source &lt;(kubectl completion bash)\nalias k=kubectl\ncomplete -o default -F __start_kubectl k\n</code></pre> <pre><code>source &lt;(kubectl completion zsh)\nalias k=kubectl\ncomplete -F _start_kubectl k\n</code></pre>"},{"location":"install/2_prereq/#install-kubernetes-optional","title":"Install Kubernetes (optional)","text":"<p>To install <code>sdc</code> on a kubernetes cluster we first need to install a <code>kubernetes</code> cluster. <code>Sdc</code> has no special requirements on the <code>k8s</code> cluster, so any <code>k8s</code> distribution should work. </p> kindother <p>First install kind using kind</p> <p>In this example we install a <code>kind</code> cluster with name <code>sdc</code>. </p> <pre><code>kind create cluster --name sdc\n</code></pre>"},{"location":"install/3_k8s_collocated/","title":"Kubernetes-collocated","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/3_k8s_collocated/#install-sdc-components","title":"Install SDC Components","text":"<p>Once the cluster is deployed we install the <code>sdc</code> components. These manifests deploy sdc as a deployment where the pod contains 2 containers:</p> <ol> <li>the config-server container with the various controllers</li> <li>the data-server/schema-server/cache collocated in a single container</li> </ol> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Namespace\nmetadata:\nname: network-system\n---\nkind: ServiceAccount\napiVersion: v1\nmetadata:\nname: config-apiserver\nnamespace: network-system\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: capis\nnamespace: network-system\nspec:\nports:\n- port: 6443\nprotocol: TCP\ntargetPort: 6443\nselector:\nconfig-apiserver: \"true\"\n---\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/tls\nmetadata:\nname: capis\nnamespace: network-system\nlabels:\nconfig-apiserver: \"true\"\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lJSC9mSFZHenZ3cnN3RFFZSktvWklodmNOQVFFTEJRQXdaVEVMTUFrR0ExVUUKQmhNQ2RXNHhDekFKQmdOVkJBZ01Bbk4wTVFvd0NBWURWUVFIREFGc01Rb3dDQVlEVlFRS0RBRnZNUXN3Q1FZRApWUVFMREFKdmRURWtNQ0lHQTFVRUF3d2JZbUZ6YVdNdFkyVnlkR2xtYVdOaGRHVXRZWFYwYUc5eWFYUjVNQjRYCkRUSXlNRE16TVRBNU1UYzFNMW9YRFRNeU1ETXlPREE1TVRjMU5Gb3dIREVhTUJnR0ExVUVBeE1SWW1GemFXTXUKWkdWbVlYVnNkQzV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN0TUt0eApjc3Rjdk8rdDVMazZRQkRBZ3g1akZCL2F1dStVb3BDR2Z6VitaRW5obldpaC8xMVZ2ek44cjhmdGZuUkZGTVZ6CmJqYlVhSXNDOFc1eGJDNXNpc2VrdnVBWDlpanUzMlFybEU0RTR1UzNYREdVZkhGSFhMcWxBRU9RclUvRzQ0RGgKa0I3ajJOcDRzbk9IckF0aDA3TStvbXBmVklhSTlkQmdYY3hsUE5QRkNNamlOb1VweVM4eXNha3RQRXFjZTBpawpmNDBYVERmN1YwekFFelI0QkE4Yzh0b05UMVNnSXFIV0xueERKcnZRempDaTVFN2NMNkpmTmhlZDQ5MUVNWlEwCmVnbkV5bXd6d1Jya3BYTkZ4RHJzSXpOZmhHelB6RGJLdmFIUHh5NUwvM3h3clZ3VHllbklaOVExK0tjemtCSksKRXZIaVVKL1BML0VYZkloakFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3TFFZRFZSMFJCQ1l3SklJSmJHOWpZV3hvYjNOMGdoRmlZWE5wCll5NWtaV1poZFd4MExuTjJZNGNFZndBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEa1hsbGZMTlpzWDEKYmp1b0h4RXVUWitaODlMWUxPUDBMM0dHMFgwdVdkZzJFcXY1bmZNRHVRVmJIRmt5dVo3ZDlDY01QYk12MTdDWgoxZGwwQk1GQTJkTkJzK3V1UXFIUFh3RkI4SFdPSDhBc1pMMnYvbG91T3g2dU1QQk9uWUhuQ3pFY21FQXZoR2dLCkpXMDNkd2QwNlJPeUdLT29qSklFTlRnd0xnQ1dZSytPWmIzQklyMUJqS012Q2dHN3pJVDFUUVNna3hGN1NGNzUKYk5BaEdOa0NWMGVrSnNXQWk1UGhzVS9IdWthdGVHUGNMS3hia0RGdHpSV2tRNmdKUXhkZmVuOVBKTjVJVCt4RQpFci8wYUkrOFM5Y1FPUnk0VTNDSFRodmlnOGFyZ3FucmFWMU92OXZNTWxzZ3pnYXc3SjdaeGtkWWwrSkMyWUcvCjJrUThVd1IzQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclRDcmNYTExYTHp2cmVTNU9rQVF3SU1lWXhRZjJycnZsS0tRaG44MWZtUko0WjFvCm9mOWRWYjh6ZksvSDdYNTBSUlRGYzI0MjFHaUxBdkZ1Y1d3dWJJckhwTDdnRi9Zbzd0OWtLNVJPQk9Ma3Qxd3gKbEh4eFIxeTZwUUJEa0sxUHh1T0E0WkFlNDlqYWVMSnpoNndMWWRPelBxSnFYMVNHaVBYUVlGM01aVHpUeFFqSQo0amFGS2Nrdk1yR3BMVHhLbkh0SXBIK05GMHczKzFkTXdCTTBlQVFQSFBMYURVOVVvQ0toMWk1OFF5YTcwTTR3Cm91Uk8zQytpWHpZWG5lUGRSREdVTkhvSnhNcHNNOEVhNUtWelJjUTY3Q016WDRSc3o4dzJ5cjJoejhjdVMvOTgKY0sxY0U4bnB5R2ZVTmZpbk01QVNTaEx4NGxDZnp5L3hGM3lJWXdJREFRQUJBb0lCQUJWWU16ajNLZU1URWdMLwpkbWljYnJRYk5NcUhOMm5Rc2loQ1pNZCt0QXdRdGg1Tk5SRUtGT20xZDlYOUlBbkFGUHBTbGdjazVUTUdjMk40CmQrRVlzUndGZXBkdVF0WVJLM2hOSmQ1TkY5UjRWakhXOWZGVDZPNGZtbzB0WENaZmhiNkFXV2p6Unl0VGxaRmMKaE9xS3BKaDQ2OVZqVlBMTXl3dmtKN3RJdENFaHl4b0t0VVhwcm45SXBLNnNUa051OTFmMVA4czJNbDd1RlVqYwpJdGhMb3JnMEYyU3RaeEJmVDJGaFRYaFZxRlRJS1pmazFGbnRpbUwyWlQrRXZzQlpnZHYwa2Z1Q2hFdE5jRW1PCnRZc2dKT3ExTWF5M2d0dlk3VDB6WkRtTTIrOVpKQ0JLcm8yV2IxdGw0RHNnaWNkR0I2SlhnTi81aklSMTNmbDUKMTRJd1hza0NnWUVBemtQb1MrTko0QkJkR3RYem5tZWVhRFFQVVU0dkF1R3YyU2VtajR3RG1KRXB6aDdoMWlQZAprVWxmYjcxZ1VMbmk0SDVkVFlyVFpwOElUaXZvM3A1bUNrV3lFV09wMmx4VUZoM3JnVWN6NWt0RUhkejl1bjNoCnFYNVJpTWlkM0Y3dWRIODdqYTdJVi9mUEFGSnlremQrWHNaZGFuT0tPK1UvV0t2ek0rSFEzUThDZ1lFQTF2TWoKdml3dnFxM0FBa0VpN2RlOUxLUE1uS1N5VE9BdHQzS2dqV1RLNU5aQUdqeWpoSGxEbjRCempSS25DWk8xY0lJZwo0Wnl1VzQrUlB5aGQreEFubzVoMVh0Ny9LYzNFaW1ucjBLU0ZmRWVza2NORFIyVHNTdCtjYTl6aFFPTFJ0TWRCCnE5OWZDeFprK1pmcEhpSzJCK0pHVExNdVJRY0tDYU43RldKTkIyMENnWUJhc2k5bGx3WjMySm9uMzZYa3BDbGEKSm5JSnpUZ01xMUlZU1VBSzVJVDhRL0ErNndOZ2xwcXBkTHJiTmtrd2xkdjEzSHFJU3gvVGd1QXpCMG01QWF0YQpudlRDZ3JGQUM5TUplcFNBWHQrcVJyUW44WEU3M0hncWdCbTM3SWJGVEpUTGN0cXIzUXZJNm5VQjdqN2xEc1NwClJjM3pyZVE5bS9yenNZQVo4eFJVN3dLQmdRQ0JYTjg4Q3JlOVRzaHFFdTJFbXZ4ZEswOXZUcWVJSUxzaTFyZk4Kb01XREozWjQwOW5OVm5YZVBwNU1YdGRzcWhyZVZWS1l0WVV4MFp1bW1STEdrSmhxbXN5NGhoaW0vaEcxQTc1SwpXVm1FekZZTmU2aTRCUU00cEk4dFUwZTFsMHlDTWhGUjhTTHdOMUFaN3RUN3NBUkJobXFzcW9IRVJWSkRMc0phCndraDltUUtCZ0NYR2xoZzY4aVMzMldmSWVtYUFRMTJpNFRUUk1FNWppTFl0ZlkyREJTMDBWV3NxY0l1OEFUWm0KVHVoZHBRVG9mKzE3LzFyU0cyYnFaWFA2L0h3ak14OTVIdWlXbjVKSjA3RTduOUVCUDlkQTY0K0lHdWlvd0h5RAo2a3g3VVhuTUtTYXdiV2JxZ1JGZTFOZEdLbkh0ZE5GOGxndEdjdytxUTk3YkIreXFreXMxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: discoveryrules.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryRule\nlistKind: DiscoveryRuleList\nplural: discoveryrules\nsingular: discoveryrule\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryRule is the Schema for the DiscoveryRule API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryRuleSpec defines the desired state of DiscoveryRule\nproperties:\nconcurrentScans:\ndefault: 10\ndescription: number of concurrent IP scan\nformat: int64\ntype: integer\ndiscover:\ndescription: Discovery rule defines the profiles and templates generic\nto any discovery rule class/type Discover defines if discovery is\nenabled or not\ntype: boolean\ndiscoveryProfile:\ndescription: DiscoveryProfile define the profiles the discovery controller\nuses to discover targets\nproperties:\nconnectionProfiles:\ndescription: ConnectionProfiles define the list of profiles the\ndiscovery controller uses to discover the target. The order\nin which they are specified is the order in which discovery\nis executed.\nitems:\ntype: string\ntype: array\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- connectionProfiles\n- credentials\ntype: object\nkind:\ndefault: ip\nenum:\n- unknown\n- ip\n- pod\n- svc\ntype: string\nperiod:\ndefault: 1m\ndescription: Period defines the wait period between discovery rule\nruns\ntype: string\nprefixes:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\nexcludes:\ndescription: IP Prefixes to be excluded\nitems:\ntype: string\ntype: array\nhostName:\ndescription: HostName of the ip prefix; used for /32 or /128\naddresses with discovery disabled\ntype: string\nprefix:\ndescription: Prefix of the target/target(s)\ntype: string\nrequired:\n- prefix\ntype: object\ntype: array\nselector:\ndescription: Selector defines the selector used to select which POD/SVC\nare subject to this discovery rule\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: A label selector requirement is a selector that\ncontains values, a key, and an operator that relates the key\nand values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: operator represents a key's relationship to\na set of values. Valid operators are In, NotIn, Exists\nand DoesNotExist.\ntype: string\nvalues:\ndescription: values is an array of string values. If the\noperator is In or NotIn, the values array must be non-empty.\nIf the operator is Exists or DoesNotExist, the values\narray must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nrequired:\n- key\n- operator\ntype: object\ntype: array\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: matchLabels is a map of {key,value} pairs. A single\n{key,value} in the matchLabels map is equivalent to an element\nof matchExpressions, whose key field is \"key\", the operator\nis \"In\", and the values array contains only \"value\". The requirements\nare ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntargetConnectionProfiles:\ndescription: TargetConnectionProfiles define the profile the discovery\ncontroller uses to create targets once discovered\nitems:\nproperties:\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the target\ntype: string\ndefaultSchema:\ndescription: DefaultSchema define the default schema used to\nconnect to a target Used when discovery is disabled or when\ndiscovery is unsuccessful.\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nversion:\ndescription: Version defines the version of the schema\ntype: string\nrequired:\n- provider\n- version\ntype: object\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to\nthe target config once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to\nconnect to the target if mtls is used\ntype: string\nrequired:\n- connectionProfile\n- credentials\ntype: object\ntype: array\ntargetTemplate:\ndescription: TargetTemplate defines the template the discovery controller\nuses to create the targets as a result of the discovery\nproperties:\nannotations:\nadditionalProperties:\ntype: string\ndescription: Annotations is a key value map to be copied to the\ntarget CR.\ntype: object\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels is a key value map to be copied to the target\nCR.\ntype: object\nnameTemplate:\ndescription: target name template\ntype: string\nx-kubernetes-validations:\n- message: nameTemplate is immutable\nrule: self == oldSelf\ntype: object\nrequired:\n- discover\n- kind\n- period\n- targetConnectionProfiles\ntype: object\nstatus:\ndescription: DiscoveryRuleStatus defines the observed state of DiscoveryRule\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nstartTime:\ndescription: StartTime identifies when the dr got started\nformat: date-time\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: schemas.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Schema\nlistKind: SchemaList\nplural: schemas\nsingular: schema\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.version\nname: VERSION\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Schema is the Schema for the Schema API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SchemaSpec defines the desired state of Schema\nproperties:\ndirs:\ndescription: Dirs defines the list of directories that identified\nthe provider schema in src/dst pairs relative within the repository\nitems:\ndescription: SrcDstPath provide a src/dst pair for the loader to\ndownload the schema from a specific src in the repository to a\ngiven destination in the schema server\nproperties:\ndst:\ndescription: Dst is the relative directory in the schema server\ntype: string\nsrc:\ndescription: Src is the relative directory in the repository\nURL\ntype: string\nrequired:\n- dst\n- src\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: dirs is immutable\nrule: oldSelf.all(x, x in self)\nkind:\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\ntype: string\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nx-kubernetes-validations:\n- message: provider is immutable\nrule: self == oldSelf\nref:\ndescription: Ref defines the branch or tag of the repository corresponding\nto the provider schema version\ntype: string\nx-kubernetes-validations:\n- message: ref is immutable\nrule: self == oldSelf\nrepoURL:\ndescription: URL specifies the base URL for a given repository\ntype: string\nx-kubernetes-validations:\n- message: url is immutable\nrule: self == oldSelf\nschema:\ndescription: Schema provides the details of which files must be used\nfor the models and which files/directories cana be excludes\nproperties:\nexcludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: excludes is immutable\nrule: oldSelf.all(x, x in self)\nincludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: includes is immutable\nrule: oldSelf.all(x, x in self)\nmodels:\ndescription: Models defines the list of files/directories to be\nused as a model\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: models is immutable\nrule: oldSelf.all(x, x in self)\nrequired:\n- excludes\n- includes\n- models\ntype: object\nversion:\ndescription: Version defines the version of the schema\ntype: string\nx-kubernetes-validations:\n- message: version is immutable\nrule: self == oldSelf\nrequired:\n- dirs\n- kind\n- provider\n- ref\n- repoURL\n- schema\n- version\ntype: object\nstatus:\ndescription: SchemaStatus defines the observed state of Schema\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetconnectionprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetConnectionProfile\nlistKind: TargetConnectionProfileList\nplural: targetconnectionprofiles\nsingular: targetconnectionprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetConnectionProfile is the Schema for the TargetConnectionProfile\nAPI\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetConnectionProfileSpec defines the desired state of\nTargetConnectionProfile\nproperties:\nconnectRetry:\ndefault: 0\ndescription: A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the largest\nrepresentable duration to approximately 290 years.\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: connectRetry is immutable\nrule: self == oldSelf\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nincludeNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: includeNS is immutable\nrule: self == oldSelf\ninsecure:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: insecure is immutable\nrule: self == oldSelf\noperationWithNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: operationWithNS is immutable\nrule: self == oldSelf\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\ntype: integer\nx-kubernetes-validations:\n- message: port is immutable\nrule: self == oldSelf\npreferredNetconfVersion:\ndefault: \"1.0\"\nenum:\n- \"1.0\"\n- \"1.1\"\ntype: string\nx-kubernetes-validations:\n- message: preferredNetconfVersion is immutable\nrule: self == oldSelf\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nx-kubernetes-validations:\n- message: protocol is immutable\nrule: self == oldSelf\nskipVerify:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: skipVerify is immutable\nrule: self == oldSelf\ntimeout:\ndefault: 10\ndescription: A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the largest\nrepresentable duration to approximately 290 years.\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: timeout is immutable\nrule: self == oldSelf\nuseOperationRemove:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nrequired:\n- port\n- protocol\ntype: object\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targets.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Target\nlistKind: TargetList\nplural: targets\nsingular: target\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .status.conditions[?(@.type=='DSReady')].status\nname: DATASTORE\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.address\nname: ADDRESS\ntype: string\n- jsonPath: .status.discoveryInfo.platform\nname: PLATFORM\ntype: string\n- jsonPath: .status.discoveryInfo.serialNumber\nname: SERIALNUMBER\ntype: string\n- jsonPath: .status.discoveryInfo.macAddress\nname: MACADDRESS\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Target is the Schema for the Target API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSpec defines the desired state of Target\nproperties:\naddress:\ndescription: Address defines the address to connect to the target\ntype: string\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\nprovider:\ndescription: Provider specifies the provider using this target.\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to the target\nconfig once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- address\n- connectionProfile\n- credentials\n- provider\ntype: object\nstatus:\ndescription: TargetStatus defines the observed state of Target\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ndiscoveryInfo:\ndescription: Discovery info defines the information retrieved during\ndiscovery\nproperties:\nhostname:\ndescription: HostName associated with the target\ntype: string\nlastSeen:\ndescription: Last discovery time\nformat: date-time\ntype: string\nmacAddress:\ndescription: MacAddress associated with the target\ntype: string\nplatform:\ndescription: Platform associated with the target\ntype: string\nprotocol:\ndescription: Protocol used for discovery\ntype: string\nprovider:\ndescription: Type associated with the target\ntype: string\nserialNumber:\ndescription: SerialNumber associated with the target\ntype: string\nsupportedEncodings:\ndescription: Supported Encodings of the target\nitems:\ntype: string\ntype: array\nversion:\ndescription: Version associated with the target\ntype: string\ntype: object\nusedReferences:\ndescription: UsedReferences track the resource used to reconcile the\ncr\nproperties:\nconnectionProfileResourceVersion:\ntype: string\nsecretResourceVersion:\ntype: string\nsyncProfileResourceVersion:\ntype: string\ntlsSecretResourceVersion:\ntype: string\nrequired:\n- connectionProfileResourceVersion\n- syncProfileResourceVersion\ntype: object\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetsyncprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetSyncProfile\nlistKind: TargetSyncProfileList\nplural: targetsyncprofiles\nsingular: targetsyncprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetSyncProfile is the Schema for the TargetSyncProfile API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSyncProfileSpec defines the desired state of TargetSyncProfile\nproperties:\nbuffer:\ndefault: 0\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: buffer is immutable\nrule: self == oldSelf\nsync:\nitems:\ndescription: TargetSyncProfileSync defines the desired state of\nTargetSyncProfileSync\nproperties:\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\ninterval:\ndefault: 0\nformat: int64\ntype: integer\nmode:\nenum:\n- unknown\n- onChange\n- sample\n- once\ntype: string\nname:\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 10\ntype: array\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nrequired:\n- mode\n- name\n- paths\n- protocol\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: sync may only be added\nrule: oldSelf.all(x, x in self)\nvalidate:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: validate is immutable\nrule: self == oldSelf\nworkers:\ndefault: 10\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: workers is immutable\nrule: self == oldSelf\ntype: object\nx-kubernetes-validations:\n- message: sync is required once set\nrule: '!has(oldSelf.sync) || has(self.sync)'\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\nname: v1alpha1.config.sdcio.dev\nspec:\ninsecureSkipTLSVerify: true\ngroup: config.sdcio.dev\ngroupPriorityMinimum: 1000\nversionPriority: 15\nservice:\nname: capis\nnamespace: network-system\nport: 6443\nversion: v1alpha1\n#caBundle: \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lKQUtKY0FOZ3htSG1TTUEwR0NTcUdTSWIzRFFFQkN3VUFNR1V4Q3pBSkJnTlYKQkFZVEFuVnVNUXN3Q1FZRFZRUUlEQUp6ZERFS01BZ0dBMVVFQnd3QmJERUtNQWdHQTFVRUNnd0JiekVMTUFrRwpBMVVFQ3d3Q2IzVXhKREFpQmdOVkJBTU1HMkpoYzJsakxXTmxjblJwWm1sallYUmxMV0YxZEdodmNtbDBlVEFlCkZ3MHlNakF6TXpFd09URTNOVE5hRncweU16QXpNekV3T1RFM05UTmFNR1V4Q3pBSkJnTlZCQVlUQW5WdU1Rc3cKQ1FZRFZRUUlEQUp6ZERFS01BZ0dBMVVFQnd3QmJERUtNQWdHQTFVRUNnd0JiekVMTUFrR0ExVUVDd3dDYjNVeApKREFpQmdOVkJBTU1HMkpoYzJsakxXTmxjblJwWm1sallYUmxMV0YxZEdodmNtbDBlVENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUJwMHRhNU92Vy9VcVlsR1RMZnVsam9HYkFwVnB4MW1CbUwKR0dHOUhOZmJkVWxoQ1FtMVNYK3V6dllyQ05EZEJRMWdBYWVEa1lxOWNMbnN4YU92R25peHJ1WllUV1gyaU9maQpjRTZxRUVRTm05MmxRRnBvbnBneXI2dFc3dDhkMGRNcEVVNTlYUlQzdXRGZGhHRVJUYi94clR0c1RpaUp4Vk1jCmxFSzh3ajZjLytONitHNHZEcVBydkF5cFBJaUJtbkhwVE9tbmhOdjhSeXVXc3VXVEJwb0JTMUVjbTg1VlY3MEUKUGFpYSs3bDczLzArWmFzcTBHeklCdkx4S0ZiVHVYZHh2a0REY1M5c0FuTytVcHg1YUxhbjgrR25UTWd6NzR6Vgp3WDRuSFU1blFxYkZSSC9TQzVXeGNYczJXL0JNZllBRUk2ckhnUTBKNjJiMTBSZk0vQmNDQXdFQUFhTVdNQlF3CkVnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFxUXM5eUdsalBFcUgKVHF6REpEa29DbXlTWmQ0S3VVSEpPcjY1QmhmYmppKzBsSC9Rbk9mdHdpd1FvajhwSFlnejVmZGZJa3JMTFU1KwpwMzh0cSs5QllsOFNudXd6U2EzQ2VpYUlncHUvL05xaCtieDRad1liNFJmVnZmSU5NdUZJaUhLUFBJUm1QRmlECjZJQjl0WFNrSmNmanhHd1NLRmhLSGszYU9EbmsxNUlyTDA0U040S0ZER1dncnI0WkJoL1RYT25XVmRpMHRBN3kKT2lmRkpRdWt1anhNVDRUU3ZtcmtjZW5Ubk84VEZTMk03SGVPZDRLYm14QUJFR3ZzaGZ0V2tXUGh0ZW1IYVJXYwpVOEh2SG8xS1M4cGdyYVdxMU5jMjErdHJoQS9uaGRtaWRDbW1DOHZSQ1MwU1cxZE90Q3ZJRzhpVUpIeDVKMklGCnhjUGt3aHYrN1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config:system:auth-delegator\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\nname: config-apiserver\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-auth-reader\nnamespace: kube-system\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: Role\nname: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\nname: config-apiserver\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-apiserver-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-apiserver-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-apiserver\nnamespace: network-system\n---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\nname: config-apiserver-clusterrole\nrules:\n- apiGroups: [\"\"]\nresources: [\"namespaces\", \"secrets\"]\nverbs: [\"get\", \"watch\", \"list\"]\n- apiGroups: [\"admissionregistration.k8s.io\"]\nresources: [\"mutatingwebhookconfigurations\", \"validatingwebhookconfigurations\"]\nverbs: [\"get\", \"watch\", \"list\"]\n- apiGroups: [\"flowcontrol.apiserver.k8s.io\"]\nresources: [\"flowschemas\", \"prioritylevelconfigurations\"]\nverbs: [\"get\", \"watch\", \"list\"]\n- apiGroups: [\"config.sdcio.dev\"]\nresources: [\"configs\", \"configs/status\"]\nverbs: [\"get\", \"watch\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"inv.sdcio.dev\"]\nresources: [\"targets\", \"targets/status\"]\nverbs: [\"get\", \"watch\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"inv.sdcio.dev\"]\nresources: [\"targetconnectionprofiles\", \"targetsyncprofiles\"]\nverbs: [\"get\", \"watch\", \"list\"]\n- apiGroups: [\"inv.sdcio.dev\"]\nresources: [\"discoveryrules\", \"discoveryrules/status\"]\nverbs: [\"get\", \"watch\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"inv.sdcio.dev\"]\nresources: [\"schemas\", \"schemas/status\"]\nverbs: [\"get\", \"watch\", \"list\", \"create\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-apiserver-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-apiserver-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-apiserver\nnamespace: network-system\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\nname: aggregated-apiserver-role\nnamespace: network-system\nrules:\n- apiGroups: [\"\"]\nresources: [\"serviceaccounts\"]\nverbs: [\"get\"]\n- apiGroups: [\"\"]\nresources: [\"serviceaccounts/token\"]\nverbs: [\"create\"]\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: dataserver\nnamespace: network-system\ndata: data-server.yaml: |\ngrpc-server:\n# gRPC listening address\n# address: \":56000\"\n## TLS config\n# tls:\n#   ca:\n#   cert:\n#   key:\n#   skip-verify:\n#   client-auth:\n# expose local schema store over gRPC\nschema-server:\n# enables the schema gRPC server\nenabled: true\n# directory to store the uploaded schemas\nschemas-directory: ./schemas\n# data-server attributes\ndata-server:\n# max number of candidates per DS\nmax-candidates: 16\n# max message size in bytes the server can receive.\n# If this is not set, it defaults to 4 * 1024 * 1024 (4MB)\nmax-recv-msg-size: 25165824 # 24 * 1024 * 1024 (24MB)\ndatastores: # this specifies MAIN datastores\nschemas: []\n# remote schema server\n# schema-server:\n#   address: localhost:55000\n# TLS config\n# tls:\n#   ca:\n#   cert:\n#   key:\n#   skip-verify:\n# cache config, defaults to\n# type: local\n# store-type: badgerdb\n# dir: ./cached/caches\ncache: \n# type: remote\ntype: local\n# store-type if type == local\nstore-type: badgerdbsingle\n# local directory for caches if type == local\ndir: \"./cached/caches\"\n# remote cache address, if type == remote\n# address: localhost:50100\n# expose a prometheus server with cpu, mem and grpc metrics\nprometheus:\naddress: \":56090\"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: config-apiserver\nnamespace: network-system\nlabels:\nconfig-apiserver: \"true\"\nspec:\nreplicas: 1\nselector:\nmatchLabels:\nconfig-apiserver: \"true\"\ntemplate:\nmetadata:\nlabels:\nconfig-apiserver: \"true\"\nspec:\nserviceAccountName: config-apiserver\ncontainers:\n- name: capis\nimage: ndd.artifactory-espoo2.int.net.nokia.com/yndd/config-server:v0.0.1\nimagePullPolicy: Always\ncommand:\n- /app/capis\nargs:\n- \"--tls-cert-file=/apiserver.local.config/certificates/tls.crt\"\n- \"--tls-private-key-file=/apiserver.local.config/certificates/tls.key\"\n- \"--feature-gates=APIPriorityAndFairness=false\"\n- \"--audit-log-path=-\"\n- \"--audit-log-maxage=0\"\n- \"--audit-log-maxbackup=0\"\n- \"--secure-port=6443\"\nenv:\n- name: POD_IP\nvalueFrom:\nfieldRef:\nfieldPath: status.podIP\n- name: POD_NAMESPACE\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: metadata.namespace\n- name: \"NODE_NAME\"\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: spec.nodeName\n- name: \"NODE_IP\"\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: status.hostIP\n- name: ENABLE_TARGET\nvalue: \"true\"\n- name: ENABLE_DISCOVERYRULE\nvalue: \"true\"\n- name: ENABLE_SCHEMA\nvalue: \"true\"\nvolumeMounts:\n- name: apiserver-certs\nmountPath: /apiserver.local.config/certificates\nreadOnly: true\n- name: config-store\nmountPath: /config\n- name: schema-store\nmountPath: /schemas\n- name: data-server\nimage: ndd.artifactory-espoo2.int.net.nokia.com/yndd/data-server:v0.0.22\nimagePullPolicy: Always\ncommand:\n- /app/data-server\nargs:\n- \"--config=/config/data-server.yaml\"\nvolumeMounts:\n- name: dataserver-config\nmountPath: /config\n- name: cache\nmountPath: /cached/caches\n- name: schema-store\nmountPath: /schemas\nvolumes:\n- name: dataserver-config\nconfigMap:\nname: dataserver\n- name: apiserver-certs\nsecret:\nsecretName: capis\n- name: cache\nemptyDir:\nsizeLimit: 10Gi\n- name: config-store\npersistentVolumeClaim:\nclaimName: pvc-config-store\n- name: schema-store\npersistentVolumeClaim:\nclaimName: pvc-schema-store\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-config-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 2Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\nEOF\n</code></pre> <p>if successfull you should see a running container similar to this</p> <pre><code>kubectl get pods -n network-system\n</code></pre> <p>output</p> <pre><code>NAME                                READY   STATUS    RESTARTS        AGE\nconfig-apiserver-5d56bf5776-kktst   2/2     Running   1 (6m49s ago)   6m55s\n</code></pre>"},{"location":"install/4_k8s_distributed/","title":"Kubernetes-distributed","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/4_k8s_distributed/#install-sdc-components","title":"Install SDC Components","text":"<p>Under construction</p>"}]}